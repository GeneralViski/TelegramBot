package com.general_viski.telegramlink;

import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.bukkit.Statistic;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.server.ServerCommandEvent;
import org.bukkit.plugin.java.JavaPlugin;


import org.bukkit.Server;
import org.bukkit.command.CommandSender;
import org.bukkit.permissions.Permission;
import org.bukkit.permissions.PermissionAttachment;
import org.bukkit.permissions.PermissionAttachmentInfo;
import org.bukkit.plugin.Plugin;
import java.util.UUID;
import java.util.HashSet;
import java.util.Set;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.List;
import java.util.ArrayList;

public class TelegramLink extends JavaPlugin implements Listener {

    private String lastUpdateJson; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ø–æ–ª–µ –≤ –∫–ª–∞—Å—Å
    private boolean botEnabled;
    private String botToken;
    private String chatId;
    private String messageFormat;
    private String commandFormat;
    private String deniedCommandFormat;
    private String playerInfoFormat;
    private long lastUpdateId = 0;
    private List<Long> allowedTelegramIds; // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö Telegram ID

    @Override
    public void onEnable() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        saveDefaultConfig();
        loadConfig();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≤–µ–Ω—Ç—ã
        Bukkit.getPluginManager().registerEvents(this, this);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        this.getCommand("tgbot").setExecutor(this);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram, –µ—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á–µ–Ω
        if (botEnabled) {
            startTelegramUpdatesChecker();
            getLogger().info("–ë–æ—Ç Telegram –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...");
        }

        getLogger().info("–ü–ª–∞–≥–∏–Ω –≤–∫–ª—é—á–µ–Ω. –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: " + (botEnabled ? "–í–ö–õ" : "–í–´–ö–õ"));
    }

    private void loadConfig() {
        FileConfiguration config = getConfig();
        botToken = config.getString("telegram.bot-token");
        chatId = config.getString("telegram.chat-id");
        messageFormat = config.getString("telegram.message-format", "[Minecraft] {player}: {message}");
        commandFormat = config.getString("telegram.command-format", "[Minecraft] –ò–≥—Ä–æ–∫ {player} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {command}");
        deniedCommandFormat = config.getString("telegram.denied-command-format", "[Minecraft] –ò–≥—Ä–æ–∫ {player} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø—Ä–∞–≤: {command}");
        playerInfoFormat = config.getString("telegram.player-info-format",
                "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ {player}:\n" +
                        "üïí –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {first-played}\n" +
                        "‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: {play-time}\n" +
                        "üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last-played}\n" +
                        "üè† –ú–∏—Ä: {world}");
        botEnabled = config.getBoolean("telegram.enabled", true);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö Telegram ID
        allowedTelegramIds = new ArrayList<>();
        for (String id : config.getStringList("telegram.allowed-ids")) {
            try {
                allowedTelegramIds.add(Long.parseLong(id));
            } catch (NumberFormatException e) {
                getLogger().warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –≤ –∫–æ–Ω—Ñ–∏–≥–µ: " + id);
            }
        }
    }

    private void startTelegramUpdatesChecker() {
        Bukkit.getScheduler().runTaskTimerAsynchronously(this, () -> {
            try {
                checkTelegramUpdates();
            } catch (Exception e) {
                getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram: " + e.getMessage());
            }
        }, 0L, 20L * 5); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    }

    private void checkTelegramUpdates() {
        try {
            URL url = new URL("https://api.telegram.org/bot" + botToken + "/getUpdates?offset=" + (lastUpdateId + 1));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                String inputLine;
                StringBuilder content = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    content.append(inputLine);
                }

                // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                String response = content.toString();
                if (response.contains("\"ok\":true") && response.contains("\"result\":")) {
                    processTelegramUpdates(response);
                }
            }
        } catch (IOException e) {
            getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram: " + e.getMessage());
        }
    }

    private void processTelegramUpdates(String json) {
        this.lastUpdateJson = json; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π JSON –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        try {
            // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
            String[] updates = json.split("\"update_id\":");
            for (int i = 1; i < updates.length; i++) {
                String update = updates[i];
                long updateId = Long.parseLong(update.split(",")[0].trim());
                lastUpdateId = Math.max(lastUpdateId, updateId);

                if (update.contains("\"text\":") && update.contains("\"chat\":{\"id\":" + chatId)) {
                    String text = update.split("\"text\":\"")[1].split("\"")[0];
                    processTelegramCommand(text);
                }
            }
        } catch (Exception e) {
            getLogger().warning("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram: " + e.getMessage());
        }
    }

    private void processTelegramCommand(String text) {
        getLogger().info("[Telegram] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: " + text);

        try {
            String command = text.trim();

            if (command.equalsIgnoreCase("/online") || command.equalsIgnoreCase("/online@YourBotName")) {
                handleOnlineCommand();
            }
            else if (command.toLowerCase().startsWith("/player ") || command.toLowerCase().startsWith("/player@yourbotname ")) {
                String playerName = command.substring(command.indexOf(" ") + 1).trim();
                handlePlayerCommand(playerName);
            }
            else if (command.equalsIgnoreCase("/help") || command.equalsIgnoreCase("/help@YourBotName")) {
                sendHelpMessage();
            } else if (command.toLowerCase().startsWith("/cmd ")) {
                // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Telegram
                long userId = getTelegramUserIdFromUpdate(); // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId
                if (isAllowedTelegramUser(userId)) {
                    String cmd = command.substring(5).trim();
                    handleConsoleCommand(cmd);
                } else {
                    sendTelegramMessage("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—à ID: " + userId);
                    getLogger().warning("[Telegram] –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø—Ä–∞–≤: " + command);
                }
            }
            else if (command.toLowerCase().startsWith("/"))  {
                getLogger().warning("[Telegram] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
                sendTelegramMessage("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                        "/online - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω\n" +
                        "/player <–Ω–∏–∫> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ\n" +
                        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
                        "/cmd <–∫–æ–º–∞–Ω–¥–∞> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É");
            }
        } catch (Exception e) {
            getLogger().severe("[Telegram] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: " + e.getMessage());
            sendTelegramMessage("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram
    private void handleConsoleCommand(String cmd) {
        Bukkit.getScheduler().runTask(this, () -> {
            try {
                // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–æ–≥–æ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
                CustomCommandSender customSender = new CustomCommandSender();
                boolean success = Bukkit.dispatchCommand(new CommandWrapper(Bukkit.getConsoleSender(), customSender), cmd);
                String result = customSender.getOutput();
                if (!success) {
                    sendTelegramMessage("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –∫–æ–Ω—Å–æ–ª—å—é.\n–ü—Ä–∏–º–µ—Ä: /cmd gamemode survival –ò–º—è–ò–≥—Ä–æ–∫–∞");
                } else if (result.isEmpty()) {
                    sendTelegramMessage("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞): " + cmd);
                } else {
                    sendTelegramMessage("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n" + result);
                }
            } catch (Exception e) {
                sendTelegramMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: " + e.getMessage() +
                        "\n–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Å–æ–ª—å—é –∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞.");
            }
        });
    }

    private void handleOnlineCommand() {
        try {
            StringBuilder onlinePlayers = new StringBuilder();
            int count = 0;

            for (Player player : Bukkit.getOnlinePlayers()) {
                if (count > 0) onlinePlayers.append("\n");
                onlinePlayers.append(player.getName());
                count++;
            }

            String message;
            if (count == 0) {
                message = "üï∏ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤";
            } else {
                message = "üü¢ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏ (" + count + "):\n" + onlinePlayers.toString();
            }

            sendTelegramMessage(message);
            getLogger().info("[Telegram] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /online");
        } catch (Exception e) {
            getLogger().severe("[Telegram] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /online: " + e.getMessage());
            sendTelegramMessage("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤");
        }
    }


    private void handlePlayerCommand(String playerName) {
        if (playerName.isEmpty()) {
            sendTelegramMessage("‚Ñπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /player <–Ω–∏–∫>");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–æ–≤ —Å–Ω–∞—á–∞–ª–∞
        Player onlinePlayer = Bukkit.getPlayerExact(playerName);
        if (onlinePlayer != null) {
            sendPlayerInfo(onlinePlayer);
            return;
        }

        // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        Bukkit.getScheduler().runTaskAsynchronously(this, () -> {
            try {
                OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(playerName);

                if (!offlinePlayer.hasPlayedBefore()) {
                    sendTelegramMessage("‚ùå –ò–≥—Ä–æ–∫ '" + playerName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
                    return;
                }

                sendOfflinePlayerInfo(offlinePlayer);
            } catch (Exception e) {
                getLogger().warning("[Telegram] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /player " + playerName + ": " + e.getMessage());
                sendTelegramMessage("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ " + playerName);
            }
        });
    }

    private void sendHelpMessage() {
        String helpText = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/online - –ü–æ–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤\n" +
                "/player <–Ω–∏–∫> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ\n" +
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n" +
                "/cmd <–∫–æ–º–∞–Ω–¥–∞> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n" +
                "/tgbot <on|off|status|reload> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º (—Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)\n\n" +
                "‚öô –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Minecraft —Å–µ—Ä–≤–µ—Ä–æ–º " + Bukkit.getServer().getName();

        sendTelegramMessage(helpText);
    }

    // –ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤—É—Ö CommandSender
    private static class CommandWrapper implements CommandSender {
        private final CommandSender primary;
        private final CommandSender secondary;

        public CommandWrapper(CommandSender primary, CommandSender secondary) {
            this.primary = primary;
            this.secondary = secondary;
        }

        @Override
        public void sendMessage(String message) {
            primary.sendMessage(message);
            secondary.sendMessage(message);
        }

        @Override
        public void sendMessage(String[] messages) {
            primary.sendMessage(messages);
            secondary.sendMessage(messages);
        }

        @Override
        public void sendMessage(java.util.UUID sender, String message) {
            primary.sendMessage(sender, message);
            secondary.sendMessage(sender, message);
        }

        @Override
        public void sendMessage(java.util.UUID sender, String[] messages) {
            primary.sendMessage(sender, messages);
            secondary.sendMessage(sender, messages);
        }

        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ CommandSender, –¥–µ–ª–µ–≥–∏—Ä—É—é—â–∞—è primary sender
        @Override
        public Server getServer() {
            return primary.getServer();
        }

        @Override
        public String getName() {
            return primary.getName();
        }

        @Override
        public boolean isOp() {
            return primary.isOp();
        }

        @Override
        public void setOp(boolean value) {
            primary.setOp(value);
        }

        @Override
        public Spigot spigot() {
            return primary.spigot();
        }

        @Override
        public boolean isPermissionSet(String name) {
            return primary.isPermissionSet(name);
        }

        @Override
        public boolean isPermissionSet(Permission perm) {
            return primary.isPermissionSet(perm);
        }

        @Override
        public boolean hasPermission(String name) {
            return primary.hasPermission(name);
        }

        @Override
        public boolean hasPermission(Permission perm) {
            return primary.hasPermission(perm);
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
            return primary.addAttachment(plugin, name, value);
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin) {
            return primary.addAttachment(plugin);
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
            return primary.addAttachment(plugin, name, value, ticks);
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
            return primary.addAttachment(plugin, ticks);
        }

        @Override
        public void removeAttachment(PermissionAttachment attachment) {
            primary.removeAttachment(attachment);
        }

        @Override
        public void recalculatePermissions() {
            primary.recalculatePermissions();
        }

        @Override
        public Set<PermissionAttachmentInfo> getEffectivePermissions() {
            return primary.getEffectivePermissions();
        }
        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã CommandSender –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    }

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CommandSender
    private class CustomCommandSender implements CommandSender {
        private final StringBuilder output = new StringBuilder();

        @Override
        public void sendMessage(String message) {
            output.append(message).append("\n");
        }

        @Override
        public void sendMessage(String[] messages) {
            for (String msg : messages) {
                output.append(msg).append("\n");
            }
        }

        @Override
        public void sendMessage(UUID sender, String message) {
            output.append(message).append("\n");
        }

        @Override
        public void sendMessage(UUID sender, String[] messages) {
            for (String msg : messages) {
                output.append(msg).append("\n");
            }
        }

        @Override
        public Server getServer() {
            return Bukkit.getServer();
        }

        @Override
        public String getName() {
            return "TelegramBot";
        }

        @Override
        public boolean isOp() {
            return true;
        }

        @Override
        public void setOp(boolean value) {
            // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        }

        @Override
        public boolean isPermissionSet(String name) {
            return true;
        }

        @Override
        public boolean isPermissionSet(Permission perm) {
            return true;
        }

        @Override
        public boolean hasPermission(String name) {
            return true;
        }

        @Override
        public boolean hasPermission(Permission perm) {
            return true;
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
            return null;
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin) {
            return null;
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
            return null;
        }

        @Override
        public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
            return null;
        }

        @Override
        public void removeAttachment(PermissionAttachment attachment) {
        }

        @Override
        public void recalculatePermissions() {
        }

        @Override
        public Set<PermissionAttachmentInfo> getEffectivePermissions() {
            return new HashSet<>();
        }

        @Override
        public Spigot spigot() {
            return new Spigot();
        }

        public String getOutput() {
            return output.toString().trim();
        }
    }

    private boolean isAllowedTelegramUser(long userId) {
        return allowedTelegramIds.contains(userId);
    }

    private long getTelegramUserIdFromUpdate() {
        if (lastUpdateJson == null) {
            getLogger().warning("lastUpdateJson is null - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return -1;
        }

        try {
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ JSON
            int lastMessageIndex = lastUpdateJson.lastIndexOf("\"message\":");
            if (lastMessageIndex == -1) return -1;

            // –ò—â–µ–º –±–ª–æ–∫ "from" –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            int fromIndex = lastUpdateJson.indexOf("\"from\":{", lastMessageIndex);
            if (fromIndex == -1) return -1;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            int idStart = lastUpdateJson.indexOf("\"id\":", fromIndex) + 5;
            if (idStart < 5) return -1;

            int idEnd = lastUpdateJson.indexOf(",", idStart);
            if (idEnd == -1) idEnd = lastUpdateJson.indexOf("}", idStart);
            if (idEnd == -1) return -1;

            String idStr = lastUpdateJson.substring(idStart, idEnd).trim();
            return Long.parseLong(idStr);
        } catch (Exception e) {
            getLogger().warning("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID: " + e.getMessage());
            return -1;
        }
    }


    private void sendPlayerInfo(Player player) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
        long playTimeTicks = player.getStatistic(Statistic.PLAY_ONE_MINUTE);

        String info = getConfig().getString("telegram.player-info-format")
                .replace("{player}", player.getName())
                .replace("{status}", "üü¢ –û–Ω–ª–∞–π–Ω")
                .replace("{uuid}", player.getUniqueId().toString())
                .replace("{first-played}", dateFormat.format(new Date(player.getFirstPlayed())))
                .replace("{play-time}", formatPlayTime(playTimeTicks))
                .replace("{last-played}", dateFormat.format(new Date(player.getLastPlayed())))
                .replace("{world}", player.getWorld().getName())
                .replace("{time}", getCurrentTime());

        sendTelegramMessage(info);
    }

    private void sendOfflinePlayerInfo(OfflinePlayer player) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
        long playTimeTicks = player.getStatistic(Statistic.PLAY_ONE_MINUTE);

        String info = getConfig().getString("telegram.player-info-format")
                .replace("{player}", player.getName() != null ? player.getName() : "Unknown")
                .replace("{status}", "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω")
                .replace("{uuid}", player.getUniqueId().toString())
                .replace("{first-played}", dateFormat.format(new Date(player.getFirstPlayed())))
                .replace("{play-time}", formatPlayTime(playTimeTicks))
                .replace("{last-played}", dateFormat.format(new Date(player.getLastPlayed())))
                .replace("{world}", "–ù–µ –≤ –∏–≥—Ä–µ")
                .replace("{time}", getCurrentTime());

        sendTelegramMessage(info);
    }

    private String formatPlayTime(long ticks) {
        long seconds = ticks / 20;
        long hours = TimeUnit.HOURS.convert(seconds, TimeUnit.SECONDS);
        long minutes = TimeUnit.MINUTES.convert(seconds, TimeUnit.SECONDS) - hours * 60;

        return String.format("%d —á. %d –º–∏–Ω.", hours, minutes);
    }

    private void saveConfigState() {
        FileConfiguration config = getConfig();
        config.set("telegram.enabled", botEnabled);
        saveConfig();
    }

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        if (cmd.getName().equalsIgnoreCase("tgbot")) {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            String senderName = sender.getName();
            String command = "/tgbot " + String.join(" ", args);
            getLogger().log(Level.INFO, "–ò–≥—Ä–æ–∫ {0} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É: {1}", new Object[]{senderName, command});

            if (!sender.hasPermission("telegramlink.toggle")) {
                sender.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!");
                sendTelegramMessage(deniedCommandFormat
                        .replace("{player}", senderName)
                        .replace("{command}", command));
                getLogger().warning("–ò–≥—Ä–æ–∫ " + senderName + " –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø—Ä–∞–≤: " + command);
                return true;
            }

            if (args.length == 0) {
                sender.sendMessage("¬ß6–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgbot <on|off|status|reload>");
                return true;
            }

            switch (args[0].toLowerCase()) {
                case "on":
                    botEnabled = true;
                    saveConfigState();
                    sender.sendMessage("¬ßa–ë–æ—Ç Telegram –≤–∫–ª—é—á–µ–Ω");
                    getLogger().info("–ë–æ—Ç Telegram –±—ã–ª –≤–∫–ª—é—á–µ–Ω –∏–≥—Ä–æ–∫–æ–º " + senderName);
                    break;
                case "off":
                    botEnabled = false;
                    saveConfigState();
                    sender.sendMessage("¬ßc–ë–æ—Ç Telegram –≤—ã–∫–ª—é—á–µ–Ω");
                    getLogger().info("–ë–æ—Ç Telegram –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –∏–≥—Ä–æ–∫–æ–º " + senderName);
                    break;
                case "status":
                    sender.sendMessage("¬ß6–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: " + (botEnabled ? "¬ßa–í–ö–õ–Æ–ß–ï–ù" : "¬ßc–í–´–ö–õ–Æ–ß–ï–ù"));
                    getLogger().info("–ò–≥—Ä–æ–∫ " + senderName + " –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: " + (botEnabled ? "–í–ö–õ" : "–í–´–ö–õ"));
                    break;
                case "reload":
                    reloadConfig();
                    loadConfig();
                    sender.sendMessage("¬ßa–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                    getLogger().info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º " + senderName);
                    break;
                default:
                    sender.sendMessage("¬ß6–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgbot <on|off|status|reload>");
                    getLogger().info("–ò–≥—Ä–æ–∫ " + senderName + " –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É: " + command);
                    break;
            }
            return true;
        }
        return false;
    }

    private String getCurrentTime() {
        return new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date());
    }

    @EventHandler
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        if (!botEnabled) return;

        String formatted = getConfig().getString("telegram.message-format")
                .replace("{player}", event.getPlayer().getName())
                .replace("{message}", event.getMessage())
                .replace("{time}", getCurrentTime());

        sendTelegramMessage(formatted);
    }

    @EventHandler
    public void onPlayerCommand(PlayerCommandPreprocessEvent event) {
        if (!botEnabled) return;

        String formatted = getConfig().getString("telegram.command-format")
                .replace("{player}", event.getPlayer().getName())
                .replace("{command}", event.getMessage())
                .replace("{time}", getCurrentTime());

        sendTelegramMessage(formatted);
    }
    @EventHandler
    public void onConsoleCommand(ServerCommandEvent event) {
        if (!botEnabled) return;
        if (botToken == null || botToken.isEmpty() || chatId == null || chatId.isEmpty()) return;

        String sender = event.getSender().getName();
        String command = event.getCommand();

        String formatted = commandFormat
                .replace("{player}", sender)
                .replace("{command}", "/" + command)
                .replace("{time}", getCurrentTime());  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è

        getLogger().info("–ö–æ–Ω—Å–æ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É: " + command);
        sendTelegramMessage(formatted);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    private void sendTelegramMessage(String message) {
        try {
            URL url = new URL("https://api.telegram.org/bot" + botToken + "/sendMessage");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            String data = "chat_id=" + chatId + "&text=" + java.net.URLEncoder.encode(message, "UTF-8");
            try (OutputStream os = conn.getOutputStream()) {
                os.write(data.getBytes(StandardCharsets.UTF_8));
            }
            conn.getInputStream().close();
        } catch (Exception e) {
            getLogger().warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: " + e.getMessage());
        }
    }

    private String escapeJson(String input) {
        return input.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replace("\r", "\\r")
                .replace("\t", "\\t");
    }

    @Override
    public void onDisable() {
        saveConfigState();
        getLogger().info("–ü–ª–∞–≥–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω");
    }
}
