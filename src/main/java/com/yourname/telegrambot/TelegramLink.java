package com.yourname.telegrambot;

import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.bukkit.Statistic;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.server.ServerCommandEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.List;
import java.util.ArrayList;

public class TelegramLink extends JavaPlugin implements Listener {

    private boolean botEnabled;
    private String botToken;
    private String chatId;
    private String messageFormat;
    private String commandFormat;
    private String deniedCommandFormat;
    private String playerInfoFormat;
    private long lastUpdateId = 0;

    @Override
    public void onEnable() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        saveDefaultConfig();
        loadConfig();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≤–µ–Ω—Ç—ã
        Bukkit.getPluginManager().registerEvents(this, this);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        this.getCommand("tgbot").setExecutor(this);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram, –µ—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á–µ–Ω
        if (botEnabled) {
            startTelegramUpdatesChecker();
            getLogger().info("–ë–æ—Ç Telegram –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...");
        }

        getLogger().info("–ü–ª–∞–≥–∏–Ω –≤–∫–ª—é—á–µ–Ω. –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: " + (botEnabled ? "–í–ö–õ" : "–í–´–ö–õ"));
    }

    private void loadConfig() {
        FileConfiguration config = getConfig();
        botToken = config.getString("telegram.bot-token");
        chatId = config.getString("telegram.chat-id");
        messageFormat = config.getString("telegram.message-format", "[Minecraft] {player}: {message}");
        commandFormat = config.getString("telegram.command-format", "[Minecraft] –ò–≥—Ä–æ–∫ {player} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {command}");
        deniedCommandFormat = config.getString("telegram.denied-command-format", "[Minecraft] –ò–≥—Ä–æ–∫ {player} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø—Ä–∞–≤: {command}");
        playerInfoFormat = config.getString("telegram.player-info-format",
                "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ {player}:\n" +
                        "üïí –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {first-played}\n" +
                        "‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: {play-time}\n" +
                        "üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last-played}\n" +
                        "üè† –ú–∏—Ä: {world}");
        botEnabled = config.getBoolean("telegram.enabled", true);
    }

    private void startTelegramUpdatesChecker() {
        Bukkit.getScheduler().runTaskTimerAsynchronously(this, () -> {
            try {
                checkTelegramUpdates();
            } catch (Exception e) {
                getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram: " + e.getMessage());
            }
        }, 0L, 20L * 5); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    }

    private void checkTelegramUpdates() {
        try {
            URL url = new URL("https://api.telegram.org/bot" + botToken + "/getUpdates?offset=" + (lastUpdateId + 1));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                String inputLine;
                StringBuilder content = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    content.append(inputLine);
                }

                // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                String response = content.toString();
                if (response.contains("\"ok\":true") && response.contains("\"result\":")) {
                    processTelegramUpdates(response);
                }
            }
        } catch (IOException e) {
            getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram: " + e.getMessage());
        }
    }

    private void processTelegramUpdates(String json) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É)
        String[] updates = json.split("\"update_id\":");
        for (int i = 1; i < updates.length; i++) {
            try {
                String update = updates[i];
                long updateId = Long.parseLong(update.split(",")[0].trim());
                lastUpdateId = Math.max(lastUpdateId, updateId);

                if (update.contains("\"text\":") && update.contains("\"chat\":{\"id\":" + chatId)) {
                    String text = update.split("\"text\":\"")[1].split("\"")[0];
                    processTelegramCommand(text);
                }
            } catch (Exception e) {
                getLogger().warning("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram: " + e.getMessage());
            }
        }
    }

    private void processTelegramCommand(String text) {
        if (text.startsWith("/online")) {
            int onlineCount = Bukkit.getOnlinePlayers().size();
            String message = "üü¢ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–µ–π—á–∞—Å " + onlineCount + " –∏–≥—Ä–æ–∫(–æ–≤):\n";

            List<String> playerNames = new ArrayList<>();
            for (Player player : Bukkit.getOnlinePlayers()) {
                playerNames.add(player.getName());
            }

            if (!playerNames.isEmpty()) {
                message += String.join(", ", playerNames);
            } else {
                message += "–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω";
            }

            sendTelegramMessage(message);
        } else if (text.startsWith("/check ")) {
            String playerName = text.substring(text.indexOf(" ") + 1).trim();
            Player player = Bukkit.getPlayerExact(playerName);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–µ –ª–∏ –∏–º—è
            if (playerName.isEmpty()) {
                sendTelegramMessage("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: /player <–Ω–∏–∫>");
                return;
            }

            if (player != null) {
                sendPlayerInfo(player);
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–æ–≤
                Bukkit.getScheduler().runTaskAsynchronously(this, () -> {
                    // –ü–æ–ª—É—á–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ Bukkit.getOfflinePlayer()
                    OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(playerName);

                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                    boolean playerExists = false;
                    try {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
                        if (offlinePlayer.getFirstPlayed() > 0) {
                            playerExists = true;
                        } else {
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Bukkit/Spigot
                            playerExists = offlinePlayer.getLastPlayed() > 0;
                        }
                    } catch (Exception e) {
                        playerExists = false;
                    }

                    if (!playerExists) {
                        sendTelegramMessage("‚ö† –ò–≥—Ä–æ–∫ '" + playerName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
                        return;
                    }
                    try {
                        Date firstPlayed = new Date(Bukkit.getOfflinePlayer(playerName).getFirstPlayed());
                        Date lastPlayed = new Date(Bukkit.getOfflinePlayer(playerName).getLastPlayed());
                        long playTimeTicks = Bukkit.getOfflinePlayer(playerName).getStatistic(Statistic.PLAY_ONE_MINUTE);
                        long playTimeHours = TimeUnit.HOURS.convert(playTimeTicks / 20, TimeUnit.SECONDS);

                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");

                        String info = playerInfoFormat
                                .replace("{player}", playerName)
                                .replace("{first-played}", dateFormat.format(firstPlayed))
                                .replace("{play-time}", formatPlayTime(playTimeTicks))
                                .replace("{last-played}", dateFormat.format(lastPlayed))
                                .replace("{world}", "–û—Ñ—Ñ–ª–∞–π–Ω");

                        sendTelegramMessage(info);
                    } catch (Exception e) {
                        sendTelegramMessage("‚ö† –ò–≥—Ä–æ–∫ " + playerName + " –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
                        getLogger().warning("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ: " + e.getMessage());
                    }
                });
            }
        }
    }

    private void sendPlayerInfo(Player player) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
        long playTimeTicks = player.getStatistic(Statistic.PLAY_ONE_MINUTE);

        String info = playerInfoFormat
                .replace("{player}", player.getName())
                .replace("{first-played}", dateFormat.format(new Date(player.getFirstPlayed())))
                .replace("{play-time}", formatPlayTime(playTimeTicks))
                .replace("{last-played}", dateFormat.format(new Date(player.getLastPlayed())))
                .replace("{world}", player.getWorld().getName());

        sendTelegramMessage(info);
    }

    private String formatPlayTime(long ticks) {
        long seconds = ticks / 20;
        long hours = TimeUnit.HOURS.convert(seconds, TimeUnit.SECONDS);
        long minutes = TimeUnit.MINUTES.convert(seconds, TimeUnit.SECONDS) - hours * 60;

        return String.format("%d —á. %d –º–∏–Ω.", hours, minutes);
    }

    private void saveConfigState() {
        FileConfiguration config = getConfig();
        config.set("telegram.enabled", botEnabled);
        saveConfig();
    }

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        if (cmd.getName().equalsIgnoreCase("tgbot")) {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            String senderName = sender.getName();
            String command = "/tgbot " + String.join(" ", args);
            getLogger().log(Level.INFO, "–ò–≥—Ä–æ–∫ {0} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É: {1}", new Object[]{senderName, command});

            if (!sender.hasPermission("telegramlink.toggle")) {
                sender.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!");
                sendTelegramMessage(deniedCommandFormat
                        .replace("{player}", senderName)
                        .replace("{command}", command));
                getLogger().warning("–ò–≥—Ä–æ–∫ " + senderName + " –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø—Ä–∞–≤: " + command);
                return true;
            }

            if (args.length == 0) {
                sender.sendMessage("¬ß6–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgbot <on|off|status|reload>");
                return true;
            }

            switch (args[0].toLowerCase()) {
                case "on":
                    botEnabled = true;
                    saveConfigState();
                    sender.sendMessage("¬ßa–ë–æ—Ç Telegram –≤–∫–ª—é—á–µ–Ω");
                    getLogger().info("–ë–æ—Ç Telegram –±—ã–ª –≤–∫–ª—é—á–µ–Ω –∏–≥—Ä–æ–∫–æ–º " + senderName);
                    break;
                case "off":
                    botEnabled = false;
                    saveConfigState();
                    sender.sendMessage("¬ßc–ë–æ—Ç Telegram –≤—ã–∫–ª—é—á–µ–Ω");
                    getLogger().info("–ë–æ—Ç Telegram –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –∏–≥—Ä–æ–∫–æ–º " + senderName);
                    break;
                case "status":
                    sender.sendMessage("¬ß6–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: " + (botEnabled ? "¬ßa–í–ö–õ–Æ–ß–ï–ù" : "¬ßc–í–´–ö–õ–Æ–ß–ï–ù"));
                    getLogger().info("–ò–≥—Ä–æ–∫ " + senderName + " –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: " + (botEnabled ? "–í–ö–õ" : "–í–´–ö–õ"));
                    break;
                case "reload":
                    reloadConfig();
                    loadConfig();
                    sender.sendMessage("¬ßa–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                    getLogger().info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º " + senderName);
                    break;
                default:
                    sender.sendMessage("¬ß6–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgbot <on|off|status|reload>");
                    getLogger().info("–ò–≥—Ä–æ–∫ " + senderName + " –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É: " + command);
                    break;
            }
            return true;
        }
        return false;
    }

    @EventHandler
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        if (!botEnabled) return;
        if (botToken == null || botToken.isEmpty() || chatId == null || chatId.isEmpty()) return;

        Player player = event.getPlayer();
        String message = event.getMessage();

        String formatted = messageFormat
                .replace("{player}", player.getName())
                .replace("{message}", message);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        getLogger().info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –æ—Ç " + player.getName() + ": " + message);

        sendTelegramMessage(formatted);
    }

    @EventHandler
    public void onPlayerCommand(PlayerCommandPreprocessEvent event) {
        if (!botEnabled) return;
        if (botToken == null || botToken.isEmpty() || chatId == null || chatId.isEmpty()) return;

        Player player = event.getPlayer();
        String command = event.getMessage();

        String formatted = commandFormat
                .replace("{player}", player.getName())
                .replace("{command}", command);

        getLogger().info("–ò–≥—Ä–æ–∫ " + player.getName() + " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: " + command);
        sendTelegramMessage(formatted);
    }

    @EventHandler
    public void onConsoleCommand(ServerCommandEvent event) {
        if (!botEnabled) return;
        if (botToken == null || botToken.isEmpty() || chatId == null || chatId.isEmpty()) return;

        String sender = event.getSender().getName();
        String command = event.getCommand();

        String formatted = commandFormat
                .replace("{player}", sender)
                .replace("{command}", "/" + command);

        getLogger().info("–ö–æ–Ω—Å–æ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É: " + command);
        sendTelegramMessage(formatted);
    }

    private void sendTelegramMessage(String text) {
        Bukkit.getScheduler().runTaskAsynchronously(this, () -> {
            try {
                URL url = new URL("https://api.telegram.org/bot" + botToken + "/sendMessage");
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
                conn.setDoOutput(true);

                // –§–æ—Ä–º–∏—Ä—É–µ–º JSON –≤—Ä—É—á–Ω—É—é (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É)
                String json = String.format("{\"chat_id\":\"%s\",\"text\":\"%s\"}",
                        chatId,
                        text.replace("\\", "\\\\")
                                .replace("\"", "\\\"")
                                .replace("\n", "\\n")
                                .replace("\r", "\\r")
                                .replace("\t", "\\t"));

                try (OutputStream os = conn.getOutputStream()) {
                    byte[] input = json.getBytes(StandardCharsets.UTF_8);
                    os.write(input, 0, input.length);
                }

                int responseCode = conn.getResponseCode();
                if (responseCode != 200) {
                    // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    try (BufferedReader br = new BufferedReader(
                            new InputStreamReader(conn.getErrorStream(), StandardCharsets.UTF_8))) {
                        StringBuilder response = new StringBuilder();
                        String responseLine;
                        while ((responseLine = br.readLine()) != null) {
                            response.append(responseLine.trim());
                        }
                        getLogger().warning("–û—à–∏–±–∫–∞ Telegram API: " + responseCode + " - " +
                                conn.getResponseMessage() + " - " + response.toString());
                    }
                } else {
                    getLogger().info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
                }
            } catch (IOException e) {
                getLogger().warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: " + e.getMessage());
            }
        });
    }

    private String escapeJson(String input) {
        return input.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replace("\r", "\\r")
                .replace("\t", "\\t");
    }

    @Override
    public void onDisable() {
        saveConfigState();
        getLogger().info("–ü–ª–∞–≥–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω");
    }
}